# -*- coding: utf-8 -*-
"""Decipher_Course_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kXKDtnzL3qMU7VDa_y2tuXg-1hFL4QQP
"""

#Importing the necessary libraries
import json
import numpy as np
import pandas as pd

#Reading the json file's
import json

with open('/content/drive/My Drive/students.json') as f:
  data = json.load(f)

with open('/content/drive/My Drive/class_details.json') as f:
  class_details = json.load(f)


with open('/content/drive/My Drive/course_enrollments.json') as f:
  course_enrollment = json.load(f)

Different_super_groups=[]  # A list to contain all the different supergroups

# To find all the different supergroups in which students are enrolled
for i in range(0,10000):
  try:
    for k in data[i]['target_super_groups']:
      Different_super_groups.append(k['title'][0]['value'])
  except:
    continue

# To print only the unique elements of a list
def unique(list1): 
    x = np.array(list1) 
    print(np.unique(x))

unique(Different_super_groups) # The Different supergroups we have

#Different lists to store the students enrolled in different supergroups
Defence_Exams=[]
Engineering_Recruitment_Exams=[]
Insurance_Exams=[]
Other_Govt_Exams=[]
Police_Exams=[]
Professional_Skills=[]
Railways_Exams=[]
SSC_Exams=[]
State_Govt_Exams=[]
Teaching_Exams=[]
Banking_Exams=[]

# If else condition to appends the students in the list in which supergoup they are enrolled
for i in range(0,10000):
  try:
    for k in data[i]['target_super_groups']:
      if(k['title'][0]['value']== 'Banking Exams'):
        Banking_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Defence Exams'):
        Defence_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Engineering Recruitment Exams'):
        Engineering_Recruitment_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Insurance Exams'):
        Insurance_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Other Govt. Exams'):
        Other_Govt_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Police Exams'):
        Police_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Professional Skills'):
        Professional_Skills.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Railways Exams'):
        Railways_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'SSC Exams'):
        SSC_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'State Govt. Exams'):
        State_Govt_Exams.append(data[i]['sid'])
      if(k['title'][0]['value']== 'Teaching Exams'):
        Teaching_Exams.append(data[i]['sid'])
  except:
    continue

# List to store all the courses to the supergroup for which they are for
Defence_Exams_course=[]
Engineering_Recruitment_Exams_course=[]
Insurance_Exams_course=[]
Other_Govt_Exams_course=[]
Police_Exams_course=[]
Professional_Skills_course=[]
Railways_Exams_course=[]
SSC_Exams_course=[]
State_Govt_Exams_course=[]
Teaching_Exams_course=[]
Banking_Exams_course=[]

All_courses=[] #list to store all the courses

#To store all the courses
for i in range(0,90):
  All_courses.append(class_details[i]['class_id'])

Different_super_groups_course=[]

# To find all the super groups for which we have course 
for i in range(0,90):
  try:
    for k in class_details[i]['target_super_group']:
      Different_super_groups_course.append(k['title'][0]['value'])
  except:
    continue

unique(Different_super_groups_course)

# If else to store different courses they are for
for i in range(0,90):
  try:
    for k in class_details[i]['target_super_group']:
      if(k['title'][0]['value']== 'Banking Exams'):
        Banking_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Defence Exams'):
        Defence_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Engineering Recruitment Exams'):
        Engineering_Recruitment_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Insurance Exams'):
        Insurance_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Other Govt. Exams'):
        Other_Govt_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Police Exams'):
        Police_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Professional Skills'):
        Professional_Skills_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Railways Exams'):
        Railways_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'SSC Exams'):
        SSC_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'State Govt. Exams'):
        State_Govt_Exams_course.append(class_details[i]['class_id'])
      if(k['title'][0]['value']== 'Teaching Exams'):
        Teaching_Exams_course.append(class_details[i]['class_id'])
  except:
    continue

courses_taken=[] #To store all the courses taken by the students

# To store the courses taken in the list
for i in range(0,10000):
  try:
    for k in course_enrollment[i]['enrolled_courses']:
      courses_taken.append(k)
  except:
    continue

#A list to count how many times each course was previously taken for each super target group
Defence_course_count=[]
Engineering_Recruitment_course_count=[]
Insurance_course_count=[]
Other_Govt_course_count=[]
Police_course_count=[]
Professional_Skills_course_count=[]
Railways_course_count=[]
SSC_course_count=[]
State_Govt_course_count=[]
Teaching_course_count=[]
Banking_course_count=[]

All_courses_count=[]  #To count for all the courses

# To count number of times each course of every super target group has been taken to set the priority
for j in Defence_Exams_course:
  Defence_course_count.append(courses_taken.count(j))

for j in Engineering_Recruitment_Exams_course:
  Engineering_Recruitment_course_count.append(courses_taken.count(j))

for j in Insurance_Exams_course:
  Insurance_course_count.append(courses_taken.count(j))

for j in Other_Govt_Exams_course:
  Other_Govt_course_count.append(courses_taken.count(j))

for j in Police_Exams_course:
  Police_course_count.append(courses_taken.count(j))                                 

for j in Professional_Skills_course:
  Professional_Skills_course_count.append(courses_taken.count(j))

for j in Railways_Exams_course:
  Railways_course_count.append(courses_taken.count(j))

for j in SSC_Exams_course:
  SSC_course_count.append(courses_taken.count(j))

for j in State_Govt_Exams_course:
  State_Govt_course_count.append(courses_taken.count(j))


for j in Teaching_Exams_course:
  Teaching_course_count.append(courses_taken.count(j))

for j in Banking_Exams_course:
  Banking_course_count.append(courses_taken.count(j))

for j in All_courses:
  All_courses_count.append(courses_taken.count(j))

# To create a dataframe with the Count-Id and their count to set the priority
Defence_Exams_course = pd.DataFrame({'All_courses':Defence_Exams_course,'Count':Defence_course_count})
Engineering_Recruitment_Exams_course = pd.DataFrame({'All_courses':Engineering_Recruitment_Exams_course,'Count':Engineering_Recruitment_course_count})
Insurance_Exams_course = pd.DataFrame({'All_courses':Insurance_Exams_course,'Count':Insurance_course_count})
Other_Govt_Exams_course = pd.DataFrame({'All_courses':Other_Govt_Exams_course,'Count':Other_Govt_course_count})
Police_Exams_course = pd.DataFrame({'All_courses':Police_Exams_course,'Count':Police_course_count})
Professional_Skills_course = pd.DataFrame({'All_courses':Professional_Skills_course,'Count':Professional_Skills_course_count})
Railways_Exams_course= pd.DataFrame({'All_courses':Railways_Exams_course,'Count':Railways_course_count})
SSC_Exams_course = pd.DataFrame({'All_courses':SSC_Exams_course,'Count':SSC_course_count})
State_Govt_Exams_course = pd.DataFrame({'All_courses':State_Govt_Exams_course,'Count':State_Govt_course_count})
Teaching_Exams_course = pd.DataFrame({'All_courses':Teaching_Exams_course,'Count':Teaching_course_count})
Banking_Exams_course = pd.DataFrame({'All_courses':Banking_Exams_course,'Count':Banking_course_count})
All_courses = pd.DataFrame({'All_courses':All_courses,'Count': All_courses_count})

# To sort them on the basis of their previous occurance
Defence_Exams_course =Defence_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
Engineering_Recruitment_Exams_course = Engineering_Recruitment_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
Insurance_Exams_course = Insurance_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
Other_Govt_Exams_course = Other_Govt_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
Police_Exams_course  = Police_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
Professional_Skills_course= Professional_Skills_course.sort_values(by ='Count', ascending=False, inplace=False)
Railways_Exams_course    = Railways_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
SSC_Exams_course     = SSC_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
State_Govt_Exams_course = State_Govt_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
Teaching_Exams_course  = Teaching_Exams_course .sort_values(by ='Count', ascending=False, inplace=False)
Banking_Exams_course = Banking_Exams_course.sort_values(by ='Count', ascending=False, inplace=False)
All_courses = All_courses.sort_values(by ='Count', ascending=False, inplace=False)

#Function to Recommend the courses
def result():
  query=input()
  Recommendation=[]
  m=[]
  for i in range(0,10000):
    if course_enrollment[i]['studentIds']==query:
      if course_enrollment[i]['enrolled_courses'] ==None:
        m=[]
      else:
        m=course_enrollment[i]['enrolled_courses']
  if query in Banking_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)
    index = Banking_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Banking_Exams_course.iloc[i,0] not in m:
        Recommendation.append(Banking_Exams_course.iloc[i,0])
        if len(Recommendation) == 3:
          break;
  if query in Defence_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)
    index = Defence_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Defence_Exams_course.iloc[i,0] not in m:
        Recommendation.append(Defence_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in Engineering_Recruitment_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = Engineering_Recruitment_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Engineering_Recruitment_Exams_course.iloc[i,0] not in m:
        Recommendation.append(Engineering_Recruitment_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in Insurance_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = Insurance_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Insurance_Exams_course.iloc[i,0] not in m:
        Recommendation.append(Insurance_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in Police_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = Police_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Police_Exams_course.iloc[i,0] not in m:
        Recommendation.append(Police_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in Professional_Skills:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = Professional_Skills_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Professional_Skills_course.iloc[i,0] not in m:
        Recommendation.append(Professional_Skills_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in Railways_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = Railways_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if Railways_Exams_course.iloc[i,0] not in m:
        Recommendation.append(Railways_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in SSC_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = SSC_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if SSC_Exams_course.iloc[i,0] not in m:
        Recommendation.append(SSC_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if query in State_Govt_Exams:
    if len(Recommendation)==3:
      Recommendation.pop(0)    
    index = State_Govt_Exams_course.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if State_Govt_Exams_course.iloc[i,0] not in m:
        Recommendation.append(State_Govt_Exams_course.iloc[i,0])
        if(len(Recommendation) == 3):
          break;
  if len(Recommendation) == 0:
    index = All_courses.index
    number_of_rows = len(index)
    for i in range(0,number_of_rows):
      if All_courses.iloc[i,0] not in m:
        Recommendation.append(All_courses.iloc[i,0])
        if(len(Recommendation)==3):
          break;


  print("The recommended courses are\n")
  for i in Recommendation:
    print(i)

result()

"""The student "8b238dff38c160b4854b4f9066df49bc" is enrolled for the Bank Exam preparations and has not taken any course before so we are recommending him the courses "ef9d7813d12149b672b574cb59a562ed" ,"e46c8e4e08f7087ab2cc640f52609ece" and "b61d1b81d9c3881dbb7ecc38d4161f89" which are for bank exam prepartions and already been taken by 12,11 and 10 students respectively who are preparing for Bank exams and they are the most taken courses by the students of this super target group."""

result()

"""The Student "8b238dff38c160b4854b4f9066df49bc" is enrolled for Bank Defence and Police Exams prepartion and has already taken "e27d888f06487c279b3af905d1293646" and "857c42b22e8956f61afb3a470e85de03" courses already so we have not recommended him these courses we have recommended him  "b61d1b81d9c3881dbb7ecc38d4161f89", "0db2e72c48b89cdaa961666fcc20d5d8"
and "df4b5cec8ecaef0e1308931ede355f99" courses as these courses are most frequent courses for Bank , Defence and Police Exams Preparation respectively.
"""